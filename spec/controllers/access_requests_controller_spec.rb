require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe AccessRequestsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # AccessRequest. As you add validations to AccessRequest, be sure to
  # adjust the attributes here as well.

  let(:client_pub_key_file) {
    fixture_file_upload('test_client.pub', 'text/plain')
  }

  let(:valid_attributes) {
    {
      contact_email: 'example@example.com',
      requested_by: 'John Smith',
      reason: 'lorem ipsum',
      api_env: 'preprod',
      client_pub_key_file: client_pub_key_file,
    }
  }

  let(:invalid_attributes) {
    {
        contact_email: ''
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AccessRequestsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #show" do
  end

  describe "GET #new" do
    it "assigns a new access_request as @access_request" do
      get :new, params: {}, session: valid_session
      expect(assigns(:access_request)).to be_a_new(AccessRequest)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new AccessRequest" do
        expect {
          post :create, params: {access_request: valid_attributes}, session: valid_session
        }.to change(AccessRequest, :count).by(1)
      end

      it "assigns a newly created access_request as @access_request" do
        post :create, params: {access_request: valid_attributes}, session: valid_session
        expect(assigns(:access_request)).to be_a(AccessRequest)
        expect(assigns(:access_request)).to be_persisted
      end

      it "redirects to the created access_request" do
        post :create, params: {access_request: valid_attributes}, session: valid_session
        expect(response).to redirect_to(access_request_confirmation_url)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved access_request as @access_request" do
        post :create, params: {access_request: invalid_attributes}, session: valid_session
        expect(assigns(:access_request)).to be_a_new(AccessRequest)
      end

      it "re-renders the 'new' template" do
        post :create, params: {access_request: invalid_attributes}, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end
end
